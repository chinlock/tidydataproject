{
    "contents" : "##\n## run_analysis.R\n## - course project for \"Getting and Cleaning Data\"\n##\n\n### INSTRUCTIONS:\n# You should create one R script called run_analysis.R that does the following. \n# 1. Merges the training and the test sets to create one data set.\n# 2. Extracts only the measurements on the mean and standard deviation for each measurement. \n# 3. Uses descriptive activity names to name the activities in the data set\n# 4. Appropriately labels the data set with descriptive variable names. \n# 5. From the data set in step 4, creates a second, independent tidy data set with the average of \n#    each variable for each activity and each subject.\n\n# load libraries\nlibrary(dplyr);\nlibrary(tidyr);\n\nrun_analysis <- function()\n{\n        ## data files\n        test_subject_file <- \"./test/subject_test.txt\"    # the subject involved in the observation (1-30)\n        y_test_file <- \"./test/y_test.txt\"                # the activity he was involved in (1-6)\n        x_test_file <- \"./test/x_test.txt\"                # the measurements of the activity (561 feature points)\n        train_subject_file <- \"./train/subject_train.txt\"\n        y_train_file <- \"./train/y_train.txt\"\n        x_train_file <- \"./train/x_train.txt\"\n        features_file <- \"features.txt\"                   # the features file describing the variables of measurements\n        activity_labels_file <- \"activity_labels.txt\"     # the description of the activitoes (1-6)\n        \n        ###\n        ###  Step 0:  Read the data files\n        ###\n        print(\">>> Reading Data Files...\")\n        \n        ##  read the test data set (30%)\n        if (file.exists(test_subject_file))\n                subject_test <- read.table(test_subject_file)\n\n        if (file.exists(y_test_file))  ## test labels\n                y_test <- read.table(y_test_file)\n\n        if (file.exists(x_test_file))  ## test data\n                x_test <- read.table(x_test_file)\n        \n        ##  read the train data set (70%)\n        if (file.exists(train_subject_file))\n                subject_train <- read.table(train_subject_file) \n\n        if (file.exists(y_train_file))  ## train labels\n                y_train <- read.table(y_train_file)\n\n        if (file.exists(x_train_file))  ## train data set with 561 features\n                x_train <- read.table(x_train_file)\n\n        # read the features file\n        if(file.exists(features_file)) features_df <- read.table(features_file)\n        # read the activity labels file\n        if (file.exists(activity_labels_file)) activity_labels <- read.table(activity_labels_file)\n\n        colnames(x_test) <- features_df$V2\n        colnames(x_train) <- features_df$V2\n\n        ###\n        ### Step 1:  MERGE the data sets\n        ###\n        print(\">>> Merging Data Sets...\")\n        \n        ## merge the test data sets\n        test_df <- cbind(subject_test, y_test, x_test)\n        ## merge the train data sets\n        train_df <- cbind(subject_train, y_train, x_train)\n        ## merge test and train data sets together\n        full_df <- rbind(test_df, train_df)\n        \n        ## rename the columns\n        colnames(full_df)[1] <- \"subject\"\n        colnames(full_df)[2] <- \"activity\"\n        \n        return(full_df)\n\n        ###\n        ### Step 2:  Extract only mean and std dev measurements for each measurement\n        ###\n        print(\">>> Extracting mean() and std() columns...\")\n\n        expr <- \"[Mm]ean|std[()]|subject|activity\"\n        # extract only the columns that has 'mean()' and 'std()'\n        # subset the dataset with the required cols\n        full_df <- full_df[, grep(expr, colnames(full_df)) ]\n\n        ###\n        ### Step 3:  Use descriptive activity names to name the activities in the data set\n        ###\n        print(\">>> Adding descriptive activity names...\")\n        \n\n        colnames(activity_labels)[1] <- \"act_id\"\n        colnames(activity_labels)[2] <- \"act_name\"\n        full_df <- merge(activity_labels, full_df, by.x=\"act_id\", by.y=\"activity\", all=TRUE)\n        \n        ###\n        ### Step 4: Label dataset with descriptive variable names\n        ###\n\n        colnames(full_df) <- c(\"act_id\", \"act_name\", \"subject\", features_df$V2)\n\n        ###\n        ### Step 5: Tidy data - From the data set in step 4, creates a second, independent tidy \n        ###         data set with the average of each variable for each activity and each subject.\n        ###\n        \n        # Just for recap:-\n        # = Tidy Data =\n        #       Each variable forms a column.\n        #       Each observation forms a row.\n        #       Each type of observational unit forms a table.\n        # = Messy Data =\n        #       Column headers are values, not variable names.\n        #       Multiple variables are stored in one column.\n        #       Variables are stored in both rows and columns.\n        #       Multiple types of observational units are stored in the same table.\n        #       A single observational unit is stored in multiple tables.\n        \n\n        \n        \n        #return(t_df)\n        return(full_df)\n        \n        \n        #\n        #write.table(df,file=\"output.txt\", row.names=FALSE)\n}",
    "created" : 1414054196993.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2305807688",
    "id" : "FAD0BE7F",
    "lastKnownWriteTime" : 1414056345,
    "path" : "~/Dropbox/1 - Learning/1 - Data Science MOOC/3-Getting and Cleaning Data/Coursera_Project/Project_Working_Dir/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}