{
    "contents" : "##\n## run_analysis.R\n## - course project for \"Getting and Cleaning Data\"\n##\n\n### INSTRUCTIONS:\n# You should create one R script called run_analysis.R that does the following. \n# 1. Merges the training and the test sets to create one data set.\n# 2. Extracts only the measurements on the mean and standard deviation for each measurement. \n# 3. Uses descriptive activity names to name the activities in the data set\n# 4. Appropriately labels the data set with descriptive variable names. \n# 5. From the data set in step 4, creates a second, independent tidy data set with the average of \n#    each variable for each activity and each subject.\n\n# load libraries\nlibrary(dplyr);\nlibrary(tidyr);\n\nrun_analysis <- function()\n{\n        ## data files\n        test_subject_file <- \"./UCI HAR Dataset/test/subject_test.txt\"    # the subject involved in the observation (1-30)\n        y_test_file <- \"./UCI HAR Dataset/test/y_test.txt\"                # the activity he was involved in (1-6)\n        x_test_file <- \"./UCI HAR Dataset/test/x_test.txt\"                # the measurements of the activity (561 feature points)\n        train_subject_file <- \"./UCI HAR Dataset/train/subject_train.txt\"\n        y_train_file <- \"./UCI HAR Dataset/train/y_train.txt\"\n        x_train_file <- \"./UCI HAR Dataset/train/x_train.txt\"\n        features_file <- \"./UCI HAR Dataset/features.txt\"                   # the features file describing the variables of measurements\n        activity_labels_file <- \"./UCI HAR Dataset/activity_labels.txt\"     # the description of the activitoes (1-6)\n        \n        ###\n        ###  Step 0:  Read the data files\n        ###\n        print(\">>> Reading Data Files...\")\n        \n        ##  read the test data set (30%)\n        if (file.exists(test_subject_file)) subject_test <- read.table(test_subject_file)  \n        if (file.exists(y_test_file)) y_test <- read.table(y_test_file)  \n        if (file.exists(x_test_file)) x_test <- read.table(x_test_file)  \n        \n        ##  read the train data set (70%)\n        if (file.exists(train_subject_file)) subject_train <- read.table(train_subject_file) \n        if (file.exists(y_train_file)) y_train <- read.table(y_train_file)\n        if (file.exists(x_train_file)) x_train <- read.table(x_train_file)\n\n        # read the features file\n        if(file.exists(features_file)) features_df <- read.table(features_file)\n        # read the activity labels file\n        if (file.exists(activity_labels_file)) activity_labels <- read.table(activity_labels_file)\n        \n        # naming the columns here makes it easier for step (4)\n        colnames(x_test) <- features_df$V2      # name the columns of the test dataset\n        colnames(x_train) <- features_df$V2     # name the columns of the train dataset\n\n        ###\n        ### Step 1:  MERGE the data sets\n        ###\n        print(\">>> Merging Data Sets...\")\n        \n        ## merge the test data sets column wise\n        test_df <- cbind(subject_test, y_test, x_test)\n        ## merge the train data sets column wise\n        train_df <- cbind(subject_train, y_train, x_train)\n        ## merge test and train data sets together\n        full_df <- rbind(test_df, train_df)\n        \n        ## rename the first 2 columns as subject (values: 1-30) and activity (values:1-6)\n        colnames(full_df)[1] <- \"subject\"\n        colnames(full_df)[2] <- \"activity\"\n        \n        ###\n        ### Step 2:  Extract only mean and std dev measurements for each measurement\n        ###\n        print(\">>> Extracting mean() and std() columns only...\")\n\n        # extract only the columns that has 'mean()' and 'std()' \n        # because these are mean and std dev measurements from the measured signals \n        # not extracting the meanFreq() and angle mean variables \n        # as the question specifically asked for mean and std deviations on the \n        # signals only\n        expr <- \"mean[()]|std[()]|subject|activity\"\n\n        # subset the dataset with the required cols\n        full_df <- full_df[, grep(expr, colnames(full_df), value=TRUE) ]   # 66 + 2 columns\n\n        ###\n        ### Step 3:  Use descriptive activity names to name the activities in the data set\n        ###\n        print(\">>> Factoring descriptive activity names...\")\n        # replace the 1-6 with descriptive names \"WALKING\", etc.\n        full_df$activity <- factor(full_df$activity, labels=activity_labels$V2)\n        \n        ###\n        ### Step 4: Label dataset with descriptive variable names\n        ###\n        ##  the V1, V2, ... column names has already been replaced with meaningful ones in step (1)\n        ##  use gsub() to replace short forms to longer forms\n        print(\">>> Labelling dataset with descriptive variable names...\")\n        names(full_df) <- gsub(\"^t\", \"Time-\", names(full_df))           # tXXXX to Time-XXXX\n        names(full_df) <- gsub(\"^f\", \"Frequency-\", names(full_df))      # fXXXX to Frequency-XXXX\n        \n        ###\n        ### Step 5: Tidy data - From the data set in step 4, creates a second, independent tidy \n        ###         data set with the average of each variable for each activity and each subject.\n        ###\n        #  use ddply() if using \"plyr\" package\n        #  use group_by() and summarise_each() if using \"dplyr\" package\n        print(\">>> Calulating summarized data by activity and subject ...\")\n\n        #summarized_df <- ddply(full_df, .(activity, subject), numcolwise(mean))\n        summarised_df <-\n                full_df %>%\n                group_by(activity, subject) %>%\n                summarise_each(funs(mean))\n        \n        print(\">>> Writing out the tidy data set to output.txt...\")\n        write.table(summarised_df,file=\"output.txt\", row.names=FALSE)   #write the summarised data to file\n        \n        print(\">>> Completed!\")\n        return(summarised_df)\n}",
    "created" : 1413948563313.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "140949769",
    "id" : "916C9DC8",
    "lastKnownWriteTime" : 1414209886,
    "path" : "~/Dropbox/1 - Learning/1 - data science mooc/3-Getting and Cleaning Data/Coursera_Project/Project_Working_Dir/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}